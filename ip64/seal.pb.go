// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: seal.proto

package ip64

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ip64 struct {
	Prototype uint32 `protobuf:"varint,1,opt,name=prototype,proto3" json:"prototype,omitempty"`
	// ip on ws using ipv6 addr fc00::add2::9a17::2333::host::addr::subn::addr
	From uint64 `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To   uint64 `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	// from+to ports
	Ports                uint32   `protobuf:"varint,4,opt,name=ports,proto3" json:"ports,omitempty"`
	Datlen               uint32   `protobuf:"varint,5,opt,name=datlen,proto3" json:"datlen,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ip64) Reset()         { *m = Ip64{} }
func (m *Ip64) String() string { return proto.CompactTextString(m) }
func (*Ip64) ProtoMessage()    {}
func (*Ip64) Descriptor() ([]byte, []int) {
	return fileDescriptor_a02c8d155741ea4f, []int{0}
}
func (m *Ip64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ip64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ip64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ip64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip64.Merge(m, src)
}
func (m *Ip64) XXX_Size() int {
	return m.Size()
}
func (m *Ip64) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip64.DiscardUnknown(m)
}

var xxx_messageInfo_Ip64 proto.InternalMessageInfo

func (m *Ip64) GetPrototype() uint32 {
	if m != nil {
		return m.Prototype
	}
	return 0
}

func (m *Ip64) GetFrom() uint64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Ip64) GetTo() uint64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Ip64) GetPorts() uint32 {
	if m != nil {
		return m.Ports
	}
	return 0
}

func (m *Ip64) GetDatlen() uint32 {
	if m != nil {
		return m.Datlen
	}
	return 0
}

func (m *Ip64) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Ip64)(nil), "ip64.ip64")
}

func init() { proto.RegisterFile("seal.proto", fileDescriptor_a02c8d155741ea4f) }

var fileDescriptor_a02c8d155741ea4f = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4e, 0x4d, 0xcc,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x2c, 0x30, 0x33, 0x51, 0xea, 0x62, 0xe4,
	0x02, 0x33, 0x84, 0x64, 0xb8, 0x38, 0xc1, 0xe2, 0x25, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xbc, 0x41, 0x08, 0x01, 0x21, 0x21, 0x2e, 0x96, 0xb4, 0xa2, 0xfc, 0x5c, 0x09, 0x26, 0x05,
	0x46, 0x0d, 0x96, 0x20, 0x30, 0x5b, 0x88, 0x8f, 0x8b, 0xa9, 0x24, 0x5f, 0x82, 0x19, 0x2c, 0xc2,
	0x54, 0x92, 0x2f, 0x24, 0xc2, 0xc5, 0x5a, 0x90, 0x5f, 0x54, 0x52, 0x2c, 0xc1, 0x02, 0xd6, 0x0d,
	0xe1, 0x08, 0x89, 0x71, 0xb1, 0xa5, 0x24, 0x96, 0xe4, 0xa4, 0xe6, 0x49, 0xb0, 0x82, 0x85, 0xa1,
	0x3c, 0x90, 0x89, 0x29, 0x89, 0x25, 0x89, 0x12, 0x6c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x60, 0xb6,
	0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x09, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0xcf,
	0xab, 0x1f, 0xb9, 0x00, 0x00, 0x00,
}

func (m *Ip64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ip64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ip64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSeal(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.Datlen != 0 {
		i = encodeVarintSeal(dAtA, i, uint64(m.Datlen))
		i--
		dAtA[i] = 0x28
	}
	if m.Ports != 0 {
		i = encodeVarintSeal(dAtA, i, uint64(m.Ports))
		i--
		dAtA[i] = 0x20
	}
	if m.To != 0 {
		i = encodeVarintSeal(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x18
	}
	if m.From != 0 {
		i = encodeVarintSeal(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x10
	}
	if m.Prototype != 0 {
		i = encodeVarintSeal(dAtA, i, uint64(m.Prototype))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeal(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ip64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Prototype != 0 {
		n += 1 + sovSeal(uint64(m.Prototype))
	}
	if m.From != 0 {
		n += 1 + sovSeal(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovSeal(uint64(m.To))
	}
	if m.Ports != 0 {
		n += 1 + sovSeal(uint64(m.Ports))
	}
	if m.Datlen != 0 {
		n += 1 + sovSeal(uint64(m.Datlen))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSeal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSeal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeal(x uint64) (n int) {
	return sovSeal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ip64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ip64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ip64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prototype", wireType)
			}
			m.Prototype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prototype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			m.Ports = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ports |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datlen", wireType)
			}
			m.Datlen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Datlen |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSeal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSeal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSeal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeal = fmt.Errorf("proto: unexpected end of group")
)
